# This is free software, lisence use MIT.
# Copyright (C) https://github.com/molun

name: OpenWrt-Build-Redmi_AC2100 P3TERX

# 触发条件
on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - 'Redmi_AC2100'
  schedule:
     - cron: 0 0 1/3 * *
  watch:
    types: started

# 环境定义
env:
  #####################################################
  #####   1：编译官方源码
  #####   2：编译第三方源码
  #####   3：编译官方源码 & 第三方 Package
  #####################################################
  ## REPO_URL: https://github.com/openwrt/openwrt.git
  ## REPO_BRANCH: v19.07.2
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  ## REPO_URL: https://github.com/Lienol/openwrt.git
  ## REPO_BRANCH: dev-master dev-19.07 dev-lean-lede
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: Redmi_AC2100
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_BRANCH: true
  UPLOAD_RELEASE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai
  #####################################################

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x script/$DIY_P1_SH
        cd openwrt
        ../script/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e config.d/$CONF_FILE ] && mv config.d/$CONF_FILE openwrt/.config
        chmod +x script/$DIY_P2_SH
        cd openwrt
        ../script/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: molun/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload Branch
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BRANCH == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.openwrt }}
      run: |
        cd openwrt/bin
        zip -r OpenWrt_Packages.zip -s 100m packages
        zip -r OpenWrt_Targets.zip -s 100m targets
        git init
        git config user.name "molun"
        git config user.email "molun@github.com"
        git add .
        git commit -m "Update OpenWrt_"$CONFIG_FILE
        git push --force --quiet https://$GITHUB_TOKEN@github.com/molun/OpenWrt.git HEAD:OpenWrt_$CONFIG_FILE

    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.openwrt }}
      with:
        tag_name: ${{ env.RELEASE_DATE }}_TAG
        release_name: OpenWrt_${{ env.CONFIG_FILE }}_${{ env.RELEASE_DATE }}
        body: |
          1、本固件为自动编译
          2、发行版中只提供完整的固件
          3、需要单独IPK请到分支下载
          4、源码：${{ env.REPO_URL }}
          5、分支：${{ env.REPO_BRANCH }}
          -- Build by MOLUN @ with Github Action on ${{ env.RELEASE_DATE }}
          -- Automated build | 自动编译
        draft: false
        prerelease: false

    - name: Upload Release
      uses: actions/upload-release-asset@v1
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.openwrt }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./openwrt/bin/OpenWrt_Firmware.zip
        asset_name: OpenWrt_${{ env.CONFIG_FILE }}_${{ env.RELEASE_DATE }}.zip
        asset_content_type: application/zip

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"